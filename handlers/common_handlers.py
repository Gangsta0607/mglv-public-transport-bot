# --- START OF FILE common_handlers.py ---

import datetime
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
import logging # –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import utils # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º utils –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –¥–Ω–µ–π ---
TYPE_BUS = "bus"
TYPE_TROLLEYBUS = "trolleybus"
DAY_WD = "wd" # Weekday
DAY_WE = "we" # Weekend

TRANSPORT_CONFIG = {
    TYPE_BUS: {
        "emoji": "üöå",
        "name_singular": "–ê–≤—Ç–æ–±—É—Å",
        "name_plural": "–ê–≤—Ç–æ–±—É—Å—ã",
        "callback_prefix": "bus",
        "fav_add_prefix": "favadd_bus",
        "fav_show_prefix": "fav_bus",
        "fav_del_prefix": "favdel_bus",
        "toggle_day_prefix": "toggle_day_bus" # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–Ω—è
    },
    TYPE_TROLLEYBUS: {
        "emoji": "üöé",
        "name_singular": "–¢—Ä–æ–ª–ª–µ–π–±—É—Å",
        "name_plural": "–¢—Ä–æ–ª–ª–µ–π–±—É—Å—ã",
        "callback_prefix": "trolleybus",
        "fav_add_prefix": "favadd_trolleybus",
        "fav_show_prefix": "fav_trolleybus",
        "fav_del_prefix": "favdel_trolleybus",
        "toggle_day_prefix": "toggle_day_trolleybus" # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–Ω—è
    },
}

def get_current_day_type() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –¥–Ω—è ('wd' –∏–ª–∏ 'we')."""
    return DAY_WD if datetime.datetime.today().weekday() < 5 else DAY_WE

def get_opposite_day_type(day_type: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ç–∏–ø –¥–Ω—è."""
    return DAY_WE if day_type == DAY_WD else DAY_WD

def get_day_type_name(day_type: str, case: str = "nominative") -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–Ω—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–¥–µ–∂–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # –†–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π (–∫–æ–≥–æ? —á–µ–≥–æ?) - –±—É–¥–Ω–∏—Ö/–≤—ã—Ö–æ–¥–Ω—ã—Ö
    # –ü—Ä–µ–¥–ª–æ–∂–Ω—ã–π (–æ –∫–æ–º? –æ —á–µ–º?) - –±—É–¥–Ω—è—Ö/–≤—ã—Ö–æ–¥–Ω—ã—Ö
    # –í–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π (–∫–æ–≥–æ? —á—Ç–æ?) - –±—É–¥–Ω–∏/–≤—ã—Ö–æ–¥–Ω—ã–µ
    if day_type == DAY_WD:
        if case == "genitive": return "–±—É–¥–Ω–µ–≥–æ –¥–Ω—è"
        if case == "accusative": return "–±—É–¥–Ω–∏"
        if case == "prepositional": return "–±—É–¥–Ω–∏—Ö –¥–Ω—è—Ö"
        return "–±—É–¥–Ω–∏" # –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    elif day_type == DAY_WE:
        if case == "genitive": return "–≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è"
        if case == "accusative": return "–≤—ã—Ö–æ–¥–Ω—ã–µ"
        if case == "prepositional": return "–≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω—è—Ö"
        return "–≤—ã—Ö–æ–¥–Ω—ã–µ" # –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π
    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å"

# --- –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def show_directions(callback: CallbackQuery, transport_type: str, transport_data: dict, number: str):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞."""
    config = TRANSPORT_CONFIG[transport_type]
    try:
        vehicle = transport_data[number]
    except KeyError:
        await callback.answer(f"{config['name_singular']} ‚Ññ{number} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –°–ï–ì–û–î–ù–Ø –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    today_type = get_current_day_type()
    routes_key = "route_weekdays" if today_type == DAY_WD else "route_weekends"
    routes = vehicle.get(routes_key, [])

    if not routes:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
        opposite_day_type = get_opposite_day_type(today_type)
        opposite_routes_key = "route_weekdays" if opposite_day_type == DAY_WD else "route_weekends"
        has_opposite_routes = bool(vehicle.get(opposite_routes_key))

        message_text = (
            f"<b>{config['emoji']} {config['name_singular']} ‚Ññ{number}</b>\n\n"
            f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –Ω–∞ {get_day_type_name(today_type, 'accusative')}. "
        )
        if has_opposite_routes:
             message_text += f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –µ—Å—Ç—å –Ω–∞ {get_day_type_name(opposite_day_type, 'accusative')}?"
        else:
             message_text += "–î–∞–Ω–Ω—ã—Ö –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏ —Ç–∞–∫–∂–µ –Ω–µ—Ç."

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–Ω–∞
        kb = InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back_to_{transport_type}_list")
        await callback.message.edit_text(message_text, reply_markup=kb.as_markup())
        return

    arrows = ["‚¨ÖÔ∏è", "‚û°Ô∏è"]
    direction_text = "\n".join([f"{arrows[i]} {route.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}" for i, route in enumerate(routes)])

    kb = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=arrows[i],
            callback_data=f"route_{config['callback_prefix']}_{number}_{i}"
        ) for i in range(len(routes))
    ]
    kb.row(*buttons)
    kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back_to_{transport_type}_list"))

    try:
        await callback.message.edit_text(
            f"<b>{config['emoji']} {config['name_singular']} ‚Ññ{number}</b>\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞ {get_day_type_name(today_type, 'accusative')}):\n{direction_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=kb.as_markup()
        )
    except TelegramBadRequest:
        await callback.answer()


async def show_stops(callback: CallbackQuery, transport_type: str, transport_data: dict, number: str, route_idx: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞."""
    config = TRANSPORT_CONFIG[transport_type]
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–Ω—è –°–ï–ô–ß–ê–°, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ –∫–æ–ª–±—ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫
    initial_day_type = get_current_day_type()
    routes_key = "route_weekdays" if initial_day_type == DAY_WD else "route_weekends"

    try:
        vehicle = transport_data[number]
        routes = vehicle.get(routes_key, [])
        if not routes or route_idx >= len(routes):
            raise IndexError("Route index out of bounds or no routes found for today")
        route = routes[route_idx]
        stops = route.get("stops", [])
    except (KeyError, IndexError):
        await callback.answer(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è {config['name_singular']}–∞ ‚Ññ{number} –Ω–∞ {get_day_type_name(initial_day_type, 'accusative')}.", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    if stops:
        for i, stop in enumerate(stops):
            # –î–æ–±–∞–≤–ª—è–µ–º initial_day_type –≤ callback_data
            stop_callback_data = f"stop_{config['callback_prefix']}_{number}_{route_idx}_{i}_{initial_day_type}"
            kb.button(text=stop.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'), callback_data=stop_callback_data)
        kb.adjust(1)
        extra_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫—É (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {get_day_type_name(initial_day_type, 'accusative')}):"
    else:
        extra_text = "–ù–∞ –¥–∞–Ω–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ –Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–æ–∫."

    kb.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data=f"{config['callback_prefix']}_{number}"))

    try:
        await callback.message.edit_text(
            f"<b>{config['emoji']} {config['name_singular']} ‚Ññ{number}</b>\n"
            f"<b>{route.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
            f"{extra_text}",
            reply_markup=kb.as_markup()
        )
    except TelegramBadRequest:
        await callback.answer()


async def show_schedule_details(
    callback_or_message: CallbackQuery | Message,
    transport_type: str,
    transport_data: dict,
    number: str,
    route_idx: int,
    stop_idx: int,
    day_type: str, # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    is_from_favorites: bool = False
):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–Ω—è."""
    config = TRANSPORT_CONFIG[transport_type]
    message = callback_or_message.message if isinstance(callback_or_message, CallbackQuery) else callback_or_message
    user_id = callback_or_message.from_user.id

    logging.info(f"User {user_id}: Showing schedule details for {transport_type} #{number}, route:{route_idx}, stop:{stop_idx}, day:{day_type}, is_fav:{is_from_favorites}")

    times = []
    route_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç"
    stop_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
    vehicle_number_display = number

    try:
        vehicle = transport_data[number]
        vehicle_number_display = vehicle.get('number', number)
        routes_key = "route_weekdays" if day_type == DAY_WD else "route_weekends"
        routes = vehicle.get(routes_key, [])

        if not routes or route_idx >= len(routes):
            raise IndexError(f"Route index {route_idx} out of bounds or no routes found for {day_type}")
        route = routes[route_idx]
        route_name = route.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        stops = route.get("stops", [])

        if not stops or stop_idx >= len(stops):
             raise IndexError(f"Stop index {stop_idx} out of bounds or no stops found")
        stop = stops[stop_idx]
        stop_name = stop.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        times = stop.get("times", [])

    except (KeyError, IndexError) as e:
        logging.warning(f"User {user_id}: Data error showing schedule: {e}")
        error_text = f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {config['name_singular']}–∞ ‚Ññ{number} (–º–∞—Ä—à—Ä—É—Ç {route_idx}, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {stop_idx}) –Ω–∞ {get_day_type_name(day_type, 'accusative')}."
        if isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.answer(error_text, show_alert=True)
        elif message:
             try: await message.edit_text(error_text)
             except TelegramBadRequest: pass
        return

    # --- –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è ---
    kb = InlineKeyboardBuilder()
    text = ""
    schedule_exists = bool(times)
    opposite_day_type = get_opposite_day_type(day_type)
    opposite_schedule_exists = False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
    try:
        opposite_routes_key = "route_weekdays" if opposite_day_type == DAY_WD else "route_weekends"
        opposite_routes = vehicle.get(opposite_routes_key, [])
        if opposite_routes and route_idx < len(opposite_routes):
            opposite_route = opposite_routes[route_idx]
            opposite_stops = opposite_route.get("stops", [])
            if opposite_stops and stop_idx < len(opposite_stops):
                opposite_stop = opposite_stops[stop_idx]
                if opposite_stop.get("times"):
                    opposite_schedule_exists = True
    except Exception as e:
        logging.error(f"User {user_id}: Error checking opposite schedule: {e}")

    schedule_day_name = get_day_type_name(day_type, 'accusative')
    opposite_day_name = get_day_type_name(opposite_day_type, 'accusative')

    base_text = (
        f"<b>{config['emoji']} {config['name_singular']} ‚Ññ{vehicle_number_display}</b>\n"
        f"<b>–ú–∞—Ä—à—Ä—É—Ç:</b> {route_name}\n"
        f"<b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞:</b> {stop_name}\n\n"
    )

    if schedule_exists:
        now = datetime.datetime.now()
        nearest = []
        now_time = now.time()
        current_day_matches_schedule_day = (get_current_day_type() == day_type)

        for t_str in times:
            try:
                t_dt = datetime.datetime.strptime(t_str, "%H:%M")
                # –ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∏–ø –¥–Ω—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
                if current_day_matches_schedule_day and t_dt.time() >= now_time:
                    nearest.append(t_str)
            except ValueError: continue

        hours_schedule = {}
        for t in times:
            try:
                hour = int(t.split(":")[0])
                hours_schedule.setdefault(hour, []).append(t)
            except (ValueError, IndexError): continue

        # --- –í–û–ó–í–†–ê–©–ê–ï–ú –í–ê–® –§–û–†–ú–ê–¢ –í–†–ï–ú–ï–ù–ò ---
        formatted_schedule = "<code>" + "\n".join(
             ' '.join(sorted(minutes))
             for hour, minutes in sorted(hours_schedule.items())
        ) + "</code>"
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

        text = base_text + (
            f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule_day_name}:</b>\n{formatted_schedule}\n\n"
        )
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if current_day_matches_schedule_day:
            text += (
                f'<b>–ë–ª–∏–∂–∞–π—à–∏–µ —Ä–µ–π—Å—ã —Å–µ–≥–æ–¥–Ω—è:</b>\n'
                f'{" ".join(list(map(lambda a: f"<code>{a}</code>", nearest[:5]))) if nearest else "–ù–µ—Ç —Ä–µ–π—Å–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è"}'
            )
        else:
            text += f'<i>–ë–ª–∏–∂–∞–π—à–∏–µ —Ä–µ–π—Å—ã –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è ({get_day_type_name(get_current_day_type(), "genitive")}).</i>'


        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å
        if opposite_schedule_exists:
            toggle_callback_data = f"{config['toggle_day_prefix']}_{number}_{route_idx}_{stop_idx}_{opposite_day_type}_{int(is_from_favorites)}"
            kb.button(text=f"üóìÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ {opposite_day_name}", callback_data=toggle_callback_data)

    else: # –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–Ω—è –Ω–µ—Ç
        text = base_text + f"‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule_day_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        if opposite_schedule_exists:
            text += f"\n\n–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ {opposite_day_name}?"
            toggle_callback_data = f"{config['toggle_day_prefix']}_{number}_{route_idx}_{stop_idx}_{opposite_day_type}_{int(is_from_favorites)}"
            kb.button(text=f"üóìÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ {opposite_day_name}", callback_data=toggle_callback_data)
        else:
            text += "\n\n–î–∞–Ω–Ω—ã—Ö –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏ —Ç–∞–∫–∂–µ –Ω–µ—Ç."

    # --- –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"/"–£–¥–∞–ª–∏—Ç—å" –∏ "–ù–∞–∑–∞–¥" ---
    fav_key = f"{number}_{route_idx}_{stop_idx}"
    if is_from_favorites:
        kb.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{config['fav_del_prefix']}_{fav_key}")
        back_callback = "back_to_fav_list"
    else:
        user_favs = utils.load_favorites(user_id)
        fav_section = "buses" if transport_type == TYPE_BUS else "trolleys"
        if fav_key not in user_favs.get(fav_section, {}):
             kb.button(text="‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"{config['fav_add_prefix']}_{fav_key}")
        else:
             kb.button(text="‚úÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º", callback_data="dummy_in_favorites") # Dummy callback

        back_callback = f"route_{config['callback_prefix']}_{number}_{route_idx}"

    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
    kb.adjust(1) # –ö–Ω–æ–ø–∫–∏ –¥—Ä—É–≥ –ø–æ–¥ –¥—Ä—É–≥–æ–º

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not message: return
    try:
        # –ò–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏ "message is not modified"
        if message.html_text != text or message.reply_markup != kb.as_markup():
            await message.edit_text(text, reply_markup=kb.as_markup())
            if isinstance(callback_or_message, CallbackQuery): await callback_or_message.answer()
        elif isinstance(callback_or_message, CallbackQuery):
            await callback_or_message.answer() # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Å–∏–∫–∏
    except TelegramBadRequest as e:
         logging.warning(f"User {user_id}: Error editing schedule message: {e}")
         if isinstance(callback_or_message, CallbackQuery):
             await callback_or_message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ "–ù–∞–∑–∞–¥" ---

async def back_to_transport_list(callback: CallbackQuery, transport_type: str, start_handler_func):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ–±—É—Å–æ–≤/—Ç—Ä–æ–ª–ª–µ–π–±—É—Å–æ–≤."""
    if callback.message:
        await start_handler_func(callback.message)
        try:
           await callback.message.edit_reply_markup(reply_markup=None)
        except TelegramBadRequest: pass
    await callback.answer()

async def back_to_directions(callback: CallbackQuery, transport_type: str, transport_data: dict, number: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    await show_directions(callback, transport_type, transport_data, number)
    await callback.answer()

async def back_to_stops(callback: CallbackQuery, transport_type: str, transport_data: dict, number: str, route_idx: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    await show_stops(callback, transport_type, transport_data, number, route_idx)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è dummy –∫–Ω–æ–ø–∫–∏ ---
async def handle_dummy_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫."""
    await callback.answer("–≠—Ç–æ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")

# --- END OF FILE common_handlers.py ---