# --- START OF FILE trolleybus.py ---

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import utils
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from handlers import common_handlers
import logging

router = Router()
TRANSPORT_TYPE = common_handlers.TYPE_TROLLEYBUS
CONFIG = common_handlers.TRANSPORT_CONFIG[TRANSPORT_TYPE]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞ –∏–∑ utils)
TROLLEYBUS_DATA = utils.getTrolleybusSchedule()

# –û—Å—Ç–∞–≤–ª—è–µ–º ReplyKeyboard –∑–¥–µ—Å—å
trolleybus_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
            KeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
        ],
    ],
    resize_keyboard=True,
)

@router.message(F.text == f"{CONFIG['emoji']} {CONFIG['name_plural']}")
async def start_trolleybus_handler(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–æ–≤."""
    trolleybus_data = utils.getTrolleybusSchedule() # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if not trolleybus_data:
         await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {CONFIG['name_plural']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
         return

    kb = InlineKeyboardBuilder()
    msg_text = f"<b>–°–ø–∏—Å–æ–∫ {CONFIG['name_plural']}:</b>\n"
    sorted_numbers = sorted(trolleybus_data.keys(), key=lambda x: (0, int(x)) if x.isdigit() else (1, x))
    for number in sorted_numbers:
        trolley = trolleybus_data[number]
        route_name = trolley.get('route_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ä—à—Ä—É—Ç–µ')
        msg_text += f"<b>{CONFIG['emoji']} {CONFIG['name_singular']} ‚Ññ{trolley.get('number', number)}</b> ‚Äî <code>{route_name}</code>\n"
        kb.button(text=f"{CONFIG['emoji']} ‚Ññ{number}", callback_data=f"{CONFIG['callback_prefix']}_{number}")

    kb.adjust(3)
    await message.answer(f"–ú–µ–Ω—é '{CONFIG['name_plural']}'", reply_markup=trolleybus_menu_keyboard)

    if len(msg_text) > 4096:
        for i in range(0, len(msg_text), 4096):
             reply_markup = kb.as_markup() if i + 4096 >= len(msg_text) else None
             await message.answer(msg_text[i:i+4096], reply_markup=reply_markup)
    else:
       await message.answer(msg_text, reply_markup=kb.as_markup())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery ---

@router.callback_query(F.data.startswith(f"{CONFIG['callback_prefix']}_"))
async def select_trolleybus_handler(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–∞ -> –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    try:
        number = callback.data.split("_")[1]
    except IndexError:
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback data.", show_alert=True)
        return
    trolleybus_data = utils.getTrolleybusSchedule()
    await common_handlers.show_directions(callback, TRANSPORT_TYPE, trolleybus_data, number)

@router.callback_query(F.data.startswith(f"route_{CONFIG['callback_prefix']}_"))
async def select_route_handler(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è -> –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."""
    try:
        parts = callback.data.split("_")
        number = parts[2]
        route_idx = int(parts[3])
    except (IndexError, ValueError):
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback data.", show_alert=True)
        return
    trolleybus_data = utils.getTrolleybusSchedule()
    # –í—ã–∑—ã–≤–∞–µ–º show_stops, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–∏—Ç day_type –≤ –∫–æ–ª–±—ç–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    await common_handlers.show_stops(callback, TRANSPORT_TYPE, trolleybus_data, number, route_idx)

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
@router.callback_query(F.data.startswith(f"stop_{CONFIG['callback_prefix']}_"))
async def show_schedule_handler(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ -> –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
    try:
        # stop_trolleybus_NUMBER_ROUTEIDX_STOPIDX_DAYTYPE
        parts = callback.data.split("_")
        if len(parts) != 6: raise ValueError("Incorrect callback data parts")
        number = parts[2]
        route_idx = int(parts[3])
        stop_idx = int(parts[4])
        day_type = parts[5] # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–Ω—è –∏–∑ –∫–æ–ª–±—ç–∫–∞
        if day_type not in [common_handlers.DAY_WD, common_handlers.DAY_WE]:
             raise ValueError(f"Invalid day_type: {day_type}")

    except (IndexError, ValueError) as e:
        logging.warning(f"Invalid stop callback data: {callback.data} - {e}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.", show_alert=True)
        return

    trolleybus_data = utils.getTrolleybusSchedule()
    # –ü–µ—Ä–µ–¥–∞–µ–º day_type –≤ show_schedule_details
    await common_handlers.show_schedule_details(
        callback, TRANSPORT_TYPE, trolleybus_data, number, route_idx, stop_idx, day_type=day_type, is_from_favorites=False
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–Ω—è ---
@router.callback_query(F.data.startswith(f"{CONFIG['toggle_day_prefix']}_"))
async def toggle_day_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –±—É–¥–Ω—è–º–∏ –∏ –≤—ã—Ö–æ–¥–Ω—ã–º–∏."""
    try:
        # toggle_day_trolleybus_NUMBER_ROUTEIDX_STOPIDX_TARGETDAYTYPE_ISFAV
        # –ß–∞—Å—Ç–∏: 0       1   2         3       4         5         6             7
        parts = callback.data.split("_")
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 8 —á–∞—Å—Ç–µ–π ---
        if len(parts) != 8: raise ValueError("Incorrect toggle callback data parts")

        number = parts[3]
        route_idx = int(parts[4])
        stop_idx = int(parts[5])
        target_day_type = parts[6]
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è is_fav ---
        is_fav_int = int(parts[7])
        is_from_favorites = bool(is_fav_int)

        if target_day_type not in [common_handlers.DAY_WD, common_handlers.DAY_WE]:
             raise ValueError(f"Invalid target_day_type: {target_day_type}")

    except (IndexError, ValueError) as e:
        logging.warning(f"Invalid toggle callback data: {callback.data} - {e}")
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.", show_alert=True)
        return

    trolleybus_data = utils.getTrolleybusSchedule()
    # –í—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ —Å –Ω–æ–≤—ã–º day_type –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º is_from_favorites
    await common_handlers.show_schedule_details(
        callback, TRANSPORT_TYPE, trolleybus_data, number, route_idx, stop_idx, day_type=target_day_type, is_from_favorites=is_from_favorites
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" ---
@router.callback_query(F.data == f"back_to_{TRANSPORT_TYPE}_list")
async def back_to_list_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–æ–≤."""
    await common_handlers.back_to_transport_list(callback, TRANSPORT_TYPE, start_trolleybus_handler)

# --- Dummy callback handler (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è) ---
@router.callback_query(F.data == "dummy_in_favorites")
async def handle_dummy_fav_callback(callback: CallbackQuery):
     await common_handlers.handle_dummy_callback(callback)

# --- END OF FILE trolleybus.py ---