# --- START OF FILE bot.py ---

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from environs import Env

env = Env()
env.read_env() # –ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

# –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ bot.py
# bot_token = os.getenv("API_TOKEN") -> –∑–∞–º–µ–Ω—è–µ–º –Ω–∞:
bot_token = env.str("API_TOKEN")
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏ –æ–±—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
from handlers import bus, trolleybus, favorites, common_handlers
import utils # –ù—É–∂–µ–Ω –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
if not bot_token:
    logging.critical("API_TOKEN environment variable not set!")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è API_TOKEN")

bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text=f"{common_handlers.TRANSPORT_CONFIG[common_handlers.TYPE_BUS]['emoji']} {common_handlers.TRANSPORT_CONFIG[common_handlers.TYPE_BUS]['name_plural']}"),
            KeyboardButton(text=f"{common_handlers.TRANSPORT_CONFIG[common_handlers.TYPE_TROLLEYBUS]['emoji']} {common_handlers.TRANSPORT_CONFIG[common_handlers.TYPE_TROLLEYBUS]['name_plural']}")
        ],
         [KeyboardButton(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
)


# --- –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–°—Ç–∞—Ä—Ç, –ù–∞–∑–∞–¥) ---
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–º–∏ –Ω–∞ dp
@dp.message(F.text == "/start")
async def start_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logging.info(f"User {message.from_user.id} ({message.from_user.username}) triggered /start")
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞.",
        reply_markup=main_menu_keyboard
    )

@dp.message(F.text == "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def back_to_main_menu_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞ –≥–ª–∞–≤–Ω—É—é' –∏–∑ ReplyKeyboard"""
    logging.info(f"User {message.from_user.id} ({message.from_user.username}) requested main menu via ReplyKeyboard")
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_menu_inline_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ù–∞ –≥–ª–∞–≤–Ω—É—é'"""
    logging.info(f"User {callback.from_user.id} ({callback.from_user.username}) requested main menu via InlineKeyboard")
    await callback.answer()
    if callback.message:
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
        try:
             await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logging.warning(f"Could not edit reply markup on back_to_main for user {callback.from_user.id}: {e}")
            pass
    else:
        await bot.send_message(callback.from_user.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)


# --- –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã ---
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ
dp.include_router(bus.router)           # –ü—Ä–æ–≤–µ—Ä–∏—Ç F.text == "üöå –ê–≤—Ç–æ–±—É—Å—ã" –∑–¥–µ—Å—å
dp.include_router(trolleybus.router)    # –ü—Ä–æ–≤–µ—Ä–∏—Ç F.text == "üöé –¢—Ä–æ–ª–ª–µ–π–±—É—Å—ã" –∑–¥–µ—Å—å
dp.include_router(favorites.router)     # –ü—Ä–æ–≤–µ—Ä–∏—Ç F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –∑–¥–µ—Å—å


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä) ---
async def scheduled_reload(interval_seconds: int):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫—ç—à–∞."""
    while True:
        await asyncio.sleep(interval_seconds)
        logging.info(f"Scheduled task: Reloading schedule data...")
        try:
            await asyncio.to_thread(utils.force_reload_all_schedules)
            logging.info("Scheduled task: Schedule data reloaded successfully.")
        except Exception as e:
            logging.error(f"Scheduled task: Error reloading schedules: {e}", exc_info=True)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logging.info("Initializing schedule data...")
    try:
        utils.getBusSchedule()
        utils.getTrolleybusSchedule()
        logging.info("Schedule data initialized successfully.")
    except Exception as e:
        logging.error(f"Failed to initialize schedule data on startup: {e}", exc_info=True)
        # raise # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –º–æ–∂–µ—Ç

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    # reload_interval = 7 * 24 * 60 * 60
    # logging.info(f"Scheduling data reload every {reload_interval} seconds.")
    # asyncio.create_task(scheduled_reload(reload_interval))

    logging.info("Starting bot polling...")
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º allowed_updates –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logging.critical(f"Polling failed: {e}", exc_info=True)
    finally:
        logging.info("Closing bot session.")
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped by user.")
    except Exception as e:
        logging.critical(f"Critical error in main execution: {e}", exc_info=True)

# --- END OF FILE bot.py ---